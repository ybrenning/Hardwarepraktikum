00000:  0 0 00001 | 0 0 | 000 1110 0 1 | 0 1 1100 | 0 # Die Addresse Für Eingaberegister FE in R0 laden
00001:  0 0 00010 | 0 1 | 000 0001 1 1 | 1 0 0001 | 0 # Den Wert aus dem Eingabegaberegister mit Adresse des Wertes aus R0 (FE) in Register R1 laden
00010:  0 0 00011 | 0 0 | 000 1111 0 1 | 0 1 1100 | 0 # Die Addresse Für Eingabe und Ausgaberegister FF in R0 laden
00011:  0 0 00100 | 0 1 | 000 0010 1 1 | 1 0 0001 | 0 # Den Wert aus dem Eingabegaberegister mit Adresse des Wertes aus R0 (FF) in Register R2 laden
00100:  1 0 00111 | 0 0 | 010 0000 0 0 | 0 1 0001 | 0 # Wenn Register 2 gleich 0 ist, dann springe zu Zeile 7. Sonst springe zu Zeile 6
00101:  0 0 01101 | 0 0 | 101 0000 0 1 | 0 0 1010 | 0 # Rechtsshift mit Register 5, wobei der Carry von links hinein geschoben wird. Spring zu Zeile 13.
00110:  0 0 01110 | 0 0 | 010 0000 0 1 | 0 1 0010 | 0 # Register 2 über NOR mit 00000000 bitweise verknüpfen (= 1nerkomplement von R2). Spring zu Zeile 14.
00111:  0 0 00000 | 0 0 | 000 0000 0 0 | 0 0 0000 | 0 # (Fangzustannd, wenn durch 0 geteilt wird) Mache nichts, springe zu Zeile 0
01000:  0 0 01010 | 0 0 | 001 0010 0 1 | 0 0 0101 | 0 # Addiert Register 1 mit Register 2 und incrementiert das Ergebnis (= Divident - Divisor). Das Endergebnis wird in Register 1 geladen. Spring zu Zeile 10.
01001:  0 0 01111 | 0 0 | 100 0001 0 1 | 0 0 1100 | 0 # Der Wert von Register 1 wird in Register 4 kopiert. Spring zu Zeile 15.
01010:  0 0 01110 | 0 0 | 011 0001 0 1 | 0 1 0100 | 0 # Der Wert von Register 3 wird um 1 erhöht. Spring zu Zeile 14.
01011:  0 0 01100 | 0 0 | 000 1110 0 1 | 0 1 1100 | 0 # Der Wert 0xFE (Adresse des Ausgaberegisters) wird in Register 0 geladen.
01100:  0 0 10001 | 1 1 | 000 0100 0 0 | 0 0 1100 | 0 # Der Wert von R4 wird an das Ausgaberegister mit Adresse des Wertes aus Register 0 (0xFE) geladen. Spring zu Zeile 17.
01101:  1 1 01000 | 0 0 | 101 0000 0 0 | 0 0 0001 | 0 # Wenn der Wert in Register 5 negativ ist (2erkomplement), dann springe zu Zeile 9. Sonst springe zu Zeile 8.
01110:  0 0 10000 | 0 0 | 101 0001 0 1 | 0 0 1100 | 0 # Der Wert aus Register 1 wird in Register 5 kopiert. Spring zu Zeile 16.
01111:  0 0 01011 | 1 1 | 000 0011 0 0 | 0 0 1100 | 0 # Der Wert von R3 wird an das Ausgaberegister mit Adresse des Wertes aus Register 0 (0xFF) geladen. Spring zu Zeile 11.
10000:  0 0 00101 | 0 0 | 101 0010 0 1 | 0 0 0101 | 1 # Der Wert aus Register 5 wird mit dem Wert aus Register 2 addiert und das Ergebnis um 1 inkrementiert (= Divident - Divisor [probehalber]). Das Endergebnis wird in Register 5 geladen. Spring zu Zeile 5.
10001:  0 0 10010 | 0 0 | 011 0000 0 1 | 0 1 1100 | 0 # Setzt Register 3 wieder auf 0
10010:  0 0 00000 | 0 0 | 100 1110 0 1 | 0 1 1100 | 0 # Setzt Register 4 wieder auf 0. Spring zu Zeile 0.
